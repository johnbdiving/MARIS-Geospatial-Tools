# -*- coding: utf-8 -*-import arcpyimport pandas as pdimport pyodbcimport osclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the.pyt file)."""        self.label = "MARIS Geospatial Tools"        self.alias = "MARIS Geospatial Tools"        # List of tool classes associated with this toolbox        self.tools = [MARISTangibletoFC]class MARISTangibletoFC(object):    def __init__(self):        self.label = "MARIS_Tangible to Feature Class"        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        param0 = arcpy.Parameter(displayName = 'Excel Data Table',                                  name = 'in_excel',                                  datatype = 'GPType',                                  parameterType = 'Required',                                  direction = 'Input')         param1 = arcpy.Parameter(displayName = 'Select Sanctuary',                                  name = 'selectSanct',                                  datatype = 'GPString',                                  parameterType = 'Required',                                  direction = 'Input')                 param2 = arcpy.Parameter(displayName = 'MARIS Temporary Workspace',                                  name = 'marisWorkspace',                                   datatype = 'Workspace',                                   parameterType = 'Required',                                   direction = 'Input')                param3 = arcpy.Parameter(displayName = 'Output Feature Class Name',                                  name = 'outputFC',                                   datatype = 'GPString',                                   parameterType = 'Required',                                   direction = 'Input')        param4 = arcpy.Parameter(displayName = 'GIS Workspace',                                  name = 'outputWorkspace',                                   datatype = 'Workspace',                                   parameterType = 'Required',                                   direction = 'Input')                param5 = arcpy.Parameter(displayName = 'Spatial Reference',                                  name = 'inputSpatialReference',                                  datatype = 'Spatial Reference',                                  parameterType = 'Required',                                  direction = 'Input')        # Default values         param1.value = "TBNMS"        param3.value = "MARIS_Tangible_SITE_yyyymmdd"                return [param0, param1, param2, param3, param4, param5]          def isLicensed(self):        """Set whether tool is licensed to execute."""        try:             if arcpy.SetProduct('arcinfo') == "NotLicensed":                 raise Exception         except Exception:             return False        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        """The source code of the tool."""        # set input parameters        inputTable = parameters[0].valueAsText         arcpy.AddMessage('Table: {}'.format(inputTable))        sanctuary = parameters[1].valueAsText         arcpy.AddMessage('Selected Sanctuary: {}'.format(sanctuary))        marisWorkspace = parameters[2].valueAsText        outputFC = parameters[3].valueAsText        outputWorkspace = parameters[4].valueAsText        spatialReference = parameters[5].valueAsText        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        ##READ THE MARIS_Tangible TABLE FROM THE ACCDB FILE TO A PANDAS DATA FRAME        ##con_str = r'Driver={Microsoft Access Driver (*.mdb,*.accdb)}; DBQ=\\10.74.15.29\Shared_Data\shared_data\Research_Team\MARIS_22_13023_Great_Lakes.accdb'        ##conn = pyodbc.connect(con_str)        ##df = pd.read_sql_table('MARIS_Tangible',conn)        ##SINCE ABOVE STEP ISNT WORKING IN PYTHON 3.7.11 USE EXPORTED XLSX FILE INSTEAD        df = pd.read_excel(inputTable)        arcpy.AddMessage('Read Input Table')        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")                ## THIS LIST SETS THE ATTRIBUTE TABLE SCHEMA OF THE FINAL GIS FEATURE CLASS BY REMOVE UNNECESSARY FIELDS        df2 = df.drop(columns=['DATE_RECORDED','RECORDER_NAME','NHHC_CONTACT(S)','NIT_CONTACTS','FILE_NAMES','PHOTOGRAPHER','DATE_TAKEN'])        arcpy.AddMessage('Set Feature Class Attribute Table Schema')        arcpy.AddMessage(list(df2.columns))        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")         ##REMOVE SITES FROM OTHER SANCTUARY e.g. WSCNMS        df2 = df2[df2["SANCTUARY"].str.contains(sanctuary)== True]        arcpy.AddMessage('Selected {} Sanctuary Resources'.format(sanctuary))        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        ##REMOVE ENTRIES LACKING A POSITION DUE TO ZEROS OR EMPTY CELLS        df3 = df2[(df2["LATITUDE_(DD)"]!=0 ) & (df2["LONGITUDE_(DD)"]!=0)]        df4 = df3.dropna(subset=["LATITUDE_(DD)","LONGITUDE_(DD)"])        arcpy.AddMessage("Removed Entires Lacking Position Data")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        ##CONVERT DATA FRAME TO SHAPEFILE        file_name = 'temp.csv'        file_path = r'{}\{}'.format(marisWorkspace,file_name)        df4.to_csv(file_path, header=True)        fc_path = r'{}\{}'.format(outputWorkspace, outputFC)        X_field = 'LATITUDE_(DD)'        Y_field = 'LONGITUDE_(DD)'        arcpy.management.XYTableToPoint(file_path, fc_path, X_field, Y_field,None, spatialReference)        os.remove(file_path)        arcpy.AddMessage("MARIS_Tangible Data Converted To Shapefile")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        arcpy.AddMessage("----------------------")        ##IMPORT SHAPEFILE INTO GEODATABASE AS A POINT FC        arcpy.AddMessage("Conversion Tool Complete")        return                        